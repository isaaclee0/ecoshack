---
import TwSizeIndicator from "@/components/TwSizeIndicator.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/partials/Footer.astro";
import Header from "@/partials/Header.astro";
import "@/styles/main.css";
import {
  GoogleTagmanager,
  GoogleTagmanagerNoscript,
} from "@digi4care/astro-google-tagmanager";
import { AstroFont } from "astro-font";
import { ClientRouter } from "astro:transitions";

// font families
const pf = theme.fonts.font_family.primary;
const sf = theme.fonts.font_family.secondary;

let fontPrimary: string = "";
if (theme.fonts.font_family.primary) {
  fontPrimary = theme.fonts.font_family.primary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;.]+/gi, "");
}

let fontSecondary: string = "";
if (theme.fonts.font_family.secondary) {
  fontSecondary = theme.fonts.font_family.secondary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;.]+/gi, "");
}

// types for frontmatters
export interface Props {
  title?: string;
  meta_title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  canonical?: string;
}

// destructure frontmatter
const { title, meta_title, description, image, noindex, canonical } =
  Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- google tag manager -->
    {
      config.google_tag_manager.enable && (
        <GoogleTagmanager id={config.google_tag_manager.gtm_id} />
      )
    }
    <!-- favicon -->
    <link rel="shortcut icon" href={config.site.favicon} />
    <!-- theme meta -->
    <meta name="theme-name" content="NextSpace" />
    <meta name="msapplication-TileColor" content="#000000" />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#fff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000"
    />
    <meta name="generator" content={Astro.generator} />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <!-- google font css -->
    <AstroFont
      config={[
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontPrimary || "Inter",
          fallback: "sans-serif",
          cssVariable: "font-primary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${pf}&display=swap`,
        },
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontSecondary || "Poppins",
          fallback: "sans-serif",
          cssVariable: "font-secondary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${sf}&display=swap`,
        },
      ]}
    />

    <!-- responsive meta -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5"
    />

    <!-- Preload critical resources -->
    <link rel="preload" href="/images/logo.svg" as="image" type="image/svg+xml" />
    <link rel="dns-prefetch" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Custom domain optimization -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    
    <!-- HTTPS enforcement -->
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests" />
    <script>
      // Force HTTPS redirect if loaded over HTTP - immediate execution
      (function() {
        if (location.protocol !== 'https:' && 
            location.hostname !== 'localhost' && 
            location.hostname !== '127.0.0.1' &&
            !location.hostname.includes('workers.dev')) {
          // Use replace to avoid back button issues
          location.replace(location.href.replace('http:', 'https:'));
        }
      })();
    </script>

    <!-- title -->
    <title>
      {plainify(meta_title ? meta_title : title ? title : config.site.title)}
    </title>

    <!-- canonical url -->
    {canonical && <link rel="canonical" href={canonical} item-prop="url" />}

    <!-- noindex robots -->
    {noindex && <meta name="robots" content="noindex,nofollow" />}

    <!-- meta-description -->
    <meta
      name="description"
      content={plainify(
        description ? description : config.metadata.meta_description,
      )}
    />

    <ClientRouter />

    <!-- author from config.json -->
    <meta name="author" content={config.metadata.meta_author} />

    <!-- og-title -->
    <meta
      property="og:title"
      content={plainify(
        meta_title ? meta_title : title ? title : config.site.title,
      )}
    />

    <!-- og-description -->
    <meta
      property="og:description"
      content={plainify(
        description ? description : config.metadata.meta_description,
      )}
    />
    <meta property="og:type" content="website" />
    <meta
      property="og:url"
      content={`${config.site.base_url}/${Astro.url.pathname.replace("/", "")}`}
    />



    <!-- og-image -->
    <meta
      property="og:image"
      content={`${config.site.base_url}${
        image ? image : config.metadata.meta_image
      }`}
    />


  </head>
  <body class="overflow-x-hidden">
    {/* google tag manager noscript */}
    {
      config.google_tag_manager.enable && (
        <GoogleTagmanagerNoscript id={config.google_tag_manager.gtm_id} />
      )
    }

    <TwSizeIndicator />
    <Header />
    <main id="main-content">
      <slot />
    </main>
    <Footer />
    
    <!-- Loading indicator for page transitions -->
    <div id="loading-indicator" class="fixed inset-0 bg-white z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-200">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
    </div>
    
    <!-- AOS CSS loaded asynchronously to prevent render blocking -->
    <link rel="preload" href="https://unpkg.com/aos@2.3.1/dist/aos.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="https://unpkg.com/aos@2.3.1/dist/aos.css"></noscript>
    
    <!-- Swiper CSS loaded asynchronously to prevent render blocking -->
    <link rel="preload" href="https://unpkg.com/swiper@11/swiper-bundle.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="https://unpkg.com/swiper@11/swiper-bundle.min.css"></noscript>
    
    <script>
      // AOS init
      import AOS from "aos";

      let scrollRef = 0;

      // Fix `not animating although in viewport` issue
      window.addEventListener("scroll", function () {
        scrollRef <= 10 ? scrollRef++ : AOS.refresh();
      });

      function aosInit() {
        AOS.init({
          duration: 600,
          offset: 100,
          once: true,
        });
      }

      function scriptInit() {
        // Dropdown Menu Toggler For Mobile
        // ----------------------------------------
        const dropdownMenuToggler: NodeListOf<HTMLElement> =
          document.querySelectorAll(".nav-dropdown > .nav-link");

        dropdownMenuToggler.forEach((toggler) => {
          toggler?.addEventListener("click", (e: Event) => {
            const target = e.target as HTMLElement;
            target && target.parentElement?.classList.toggle("active");
          });
        });
      }

      function showLoading() {
        const loader = document.getElementById('loading-indicator');
        if (loader) {
          loader.style.opacity = '1';
          loader.style.pointerEvents = 'auto';
        }
      }

      function hideLoading() {
        const loader = document.getElementById('loading-indicator');
        if (loader) {
          loader.style.opacity = '0';
          loader.style.pointerEvents = 'none';
        }
      }

      // Check if we're on a custom domain and handle differently
      function isCustomDomain() {
        return !window.location.hostname.includes('workers.dev');
      }

      // Enhanced navigation handling for custom domains
      function handleCustomDomainNavigation() {
        if (isCustomDomain()) {
          // Add a small delay for custom domains to ensure proper loading
          const links = document.querySelectorAll('a[href^="/"]');
          links.forEach(link => {
            link.addEventListener('click', (e) => {
              showLoading();
              // Small delay to ensure smooth transition on custom domains
              setTimeout(() => {
                if (!e.defaultPrevented) {
                  hideLoading();
                }
              }, 100);
            });
          });
        }
      }

      // Handle page transitions
      document.addEventListener("astro:before-preparation", () => {
        showLoading();
      });

      document.addEventListener("astro:page-load", () => {
        hideLoading();
        scriptInit();
        aosInit();
        handleCustomDomainNavigation();
      });

      document.addEventListener("astro:after-swap", () => {
        hideLoading();
        aosInit();
        handleCustomDomainNavigation();
      });

      // Initial page load
      document.addEventListener("DOMContentLoaded", () => {
        hideLoading();
        scriptInit();
        aosInit();
        handleCustomDomainNavigation();
      });
    </script>
  </body>
</html>
